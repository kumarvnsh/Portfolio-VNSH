{"ast":null,"code":"import React,{useEffect,useRef}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ParticleBackground=()=>{const canvasRef=useRef(null);useEffect(()=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');let animationFrameId;// Set canvas size\nconst resizeCanvas=()=>{canvas.width=window.innerWidth;canvas.height=window.innerHeight;};resizeCanvas();window.addEventListener('resize',resizeCanvas);// Gaming-themed particles and shapes\nconst particles=[];const shapes=[];const maxParticles=50;const maxShapes=15;// Particle class\nclass Particle{constructor(){this.x=Math.random()*canvas.width;this.y=Math.random()*canvas.height;this.vx=(Math.random()-0.5)*0.5;this.vy=(Math.random()-0.5)*0.5;this.size=Math.random()*3+1;this.opacity=Math.random()*0.5+0.1;this.color=['rgba(65, 105, 225, 0.3)',// Royal blue\n'rgba(255, 215, 0, 0.2)',// Gold\n'rgba(255, 255, 255, 0.1)',// White\n'rgba(30, 58, 138, 0.2)'// Dark blue\n][Math.floor(Math.random()*4)];this.type=Math.random()>0.7?'square':'circle';}update(){this.x+=this.vx;this.y+=this.vy;// Wrap around edges\nif(this.x<0)this.x=canvas.width;if(this.x>canvas.width)this.x=0;if(this.y<0)this.y=canvas.height;if(this.y>canvas.height)this.y=0;}draw(){ctx.save();ctx.globalAlpha=this.opacity;ctx.fillStyle=this.color;if(this.type==='square'){ctx.fillRect(this.x-this.size/2,this.y-this.size/2,this.size,this.size);}else{ctx.beginPath();ctx.arc(this.x,this.y,this.size,0,Math.PI*2);ctx.fill();}ctx.restore();}}// Geometric shape class\nclass Shape{constructor(){this.x=Math.random()*canvas.width;this.y=Math.random()*canvas.height;this.size=Math.random()*20+10;this.rotation=Math.random()*Math.PI*2;this.rotationSpeed=(Math.random()-0.5)*0.02;this.opacity=Math.random()*0.1+0.05;this.color='rgba(255, 215, 0, 0.1)';this.type=['triangle','diamond','hexagon'][Math.floor(Math.random()*3)];}update(){this.rotation+=this.rotationSpeed;}draw(){ctx.save();ctx.globalAlpha=this.opacity;ctx.fillStyle=this.color;ctx.translate(this.x,this.y);ctx.rotate(this.rotation);switch(this.type){case'triangle':ctx.beginPath();ctx.moveTo(0,-this.size);ctx.lineTo(-this.size*0.866,this.size*0.5);ctx.lineTo(this.size*0.866,this.size*0.5);ctx.closePath();ctx.fill();break;case'diamond':ctx.beginPath();ctx.moveTo(0,-this.size);ctx.lineTo(this.size,0);ctx.lineTo(0,this.size);ctx.lineTo(-this.size,0);ctx.closePath();ctx.fill();break;case'hexagon':ctx.beginPath();for(let i=0;i<6;i++){const angle=i*Math.PI/3;const x=Math.cos(angle)*this.size;const y=Math.sin(angle)*this.size;if(i===0)ctx.moveTo(x,y);else ctx.lineTo(x,y);}ctx.closePath();ctx.fill();break;default:// Default case for any other shape types\nctx.beginPath();ctx.arc(0,0,this.size,0,Math.PI*2);ctx.fill();break;}ctx.restore();}}// Initialize particles and shapes\nfor(let i=0;i<maxParticles;i++){particles.push(new Particle());}for(let i=0;i<maxShapes;i++){shapes.push(new Shape());}// Animation loop\nconst animate=()=>{ctx.clearRect(0,0,canvas.width,canvas.height);// Draw gradient background\nconst gradient=ctx.createRadialGradient(canvas.width/2,canvas.height/2,0,canvas.width/2,canvas.height/2,canvas.width/2);gradient.addColorStop(0,'rgba(0, 0, 0, 0.8)');gradient.addColorStop(1,'rgba(30, 58, 138, 0.3)');ctx.fillStyle=gradient;ctx.fillRect(0,0,canvas.width,canvas.height);// Update and draw shapes\nshapes.forEach(shape=>{shape.update();shape.draw();});// Update and draw particles\nparticles.forEach(particle=>{particle.update();particle.draw();});// Draw connecting lines between nearby particles\nctx.strokeStyle='rgba(65, 105, 225, 0.1)';ctx.lineWidth=1;for(let i=0;i<particles.length;i++){for(let j=i+1;j<particles.length;j++){const dx=particles[i].x-particles[j].x;const dy=particles[i].y-particles[j].y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<100){ctx.beginPath();ctx.moveTo(particles[i].x,particles[i].y);ctx.lineTo(particles[j].x,particles[j].y);ctx.stroke();}}}// Add subtle pulsing effect\nconst time=Date.now()*0.001;const pulse=Math.sin(time)*0.1+0.9;ctx.globalAlpha=pulse*0.3;// Draw some floating text-like elements\nctx.fillStyle='rgba(255, 215, 0, 0.05)';ctx.font='12px monospace';ctx.textAlign='center';const gameElements=['🎮','⚡','🏆','💎','⭐'];gameElements.forEach((element,index)=>{const x=canvas.width/gameElements.length*index+Math.sin(time+index)*20;const y=canvas.height*0.2+Math.cos(time+index)*30;ctx.fillText(element,x,y);});ctx.globalAlpha=1;animationFrameId=requestAnimationFrame(animate);};animate();return()=>{window.removeEventListener('resize',resizeCanvas);cancelAnimationFrame(animationFrameId);};},[]);return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{position:'fixed',top:0,left:0,width:'100%',height:'100%',zIndex:-1,pointerEvents:'none'}});};export default ParticleBackground;","map":{"version":3,"names":["React","useEffect","useRef","jsx","_jsx","ParticleBackground","canvasRef","canvas","current","ctx","getContext","animationFrameId","resizeCanvas","width","window","innerWidth","height","innerHeight","addEventListener","particles","shapes","maxParticles","maxShapes","Particle","constructor","x","Math","random","y","vx","vy","size","opacity","color","floor","type","update","draw","save","globalAlpha","fillStyle","fillRect","beginPath","arc","PI","fill","restore","Shape","rotation","rotationSpeed","translate","rotate","moveTo","lineTo","closePath","i","angle","cos","sin","push","animate","clearRect","gradient","createRadialGradient","addColorStop","forEach","shape","particle","strokeStyle","lineWidth","length","j","dx","dy","distance","sqrt","stroke","time","Date","now","pulse","font","textAlign","gameElements","element","index","fillText","requestAnimationFrame","removeEventListener","cancelAnimationFrame","ref","style","position","top","left","zIndex","pointerEvents"],"sources":["/Users/vnshkumar/Documents/vnsh-gaming-portfolio/vnsh-gaming-portfolio-react/src/components/ParticleBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst ParticleBackground = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n\n    // Set canvas size\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Gaming-themed particles and shapes\n    const particles = [];\n    const shapes = [];\n    const maxParticles = 50;\n    const maxShapes = 15;\n\n    // Particle class\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.vx = (Math.random() - 0.5) * 0.5;\n        this.vy = (Math.random() - 0.5) * 0.5;\n        this.size = Math.random() * 3 + 1;\n        this.opacity = Math.random() * 0.5 + 0.1;\n        this.color = [\n          'rgba(65, 105, 225, 0.3)',   // Royal blue\n          'rgba(255, 215, 0, 0.2)',    // Gold\n          'rgba(255, 255, 255, 0.1)',  // White\n          'rgba(30, 58, 138, 0.2)'     // Dark blue\n        ][Math.floor(Math.random() * 4)];\n        this.type = Math.random() > 0.7 ? 'square' : 'circle';\n      }\n\n      update() {\n        this.x += this.vx;\n        this.y += this.vy;\n\n        // Wrap around edges\n        if (this.x < 0) this.x = canvas.width;\n        if (this.x > canvas.width) this.x = 0;\n        if (this.y < 0) this.y = canvas.height;\n        if (this.y > canvas.height) this.y = 0;\n      }\n\n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.opacity;\n        ctx.fillStyle = this.color;\n\n        if (this.type === 'square') {\n          ctx.fillRect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);\n        } else {\n          ctx.beginPath();\n          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n    }\n\n    // Geometric shape class\n    class Shape {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 20 + 10;\n        this.rotation = Math.random() * Math.PI * 2;\n        this.rotationSpeed = (Math.random() - 0.5) * 0.02;\n        this.opacity = Math.random() * 0.1 + 0.05;\n        this.color = 'rgba(255, 215, 0, 0.1)';\n        this.type = ['triangle', 'diamond', 'hexagon'][Math.floor(Math.random() * 3)];\n      }\n\n      update() {\n        this.rotation += this.rotationSpeed;\n      }\n\n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.opacity;\n        ctx.fillStyle = this.color;\n        ctx.translate(this.x, this.y);\n        ctx.rotate(this.rotation);\n\n        switch (this.type) {\n          case 'triangle':\n            ctx.beginPath();\n            ctx.moveTo(0, -this.size);\n            ctx.lineTo(-this.size * 0.866, this.size * 0.5);\n            ctx.lineTo(this.size * 0.866, this.size * 0.5);\n            ctx.closePath();\n            ctx.fill();\n            break;\n          case 'diamond':\n            ctx.beginPath();\n            ctx.moveTo(0, -this.size);\n            ctx.lineTo(this.size, 0);\n            ctx.lineTo(0, this.size);\n            ctx.lineTo(-this.size, 0);\n            ctx.closePath();\n            ctx.fill();\n            break;\n          case 'hexagon':\n            ctx.beginPath();\n            for (let i = 0; i < 6; i++) {\n              const angle = (i * Math.PI) / 3;\n              const x = Math.cos(angle) * this.size;\n              const y = Math.sin(angle) * this.size;\n              if (i === 0) ctx.moveTo(x, y);\n              else ctx.lineTo(x, y);\n            }\n            ctx.closePath();\n            ctx.fill();\n            break;\n          default:\n            // Default case for any other shape types\n            ctx.beginPath();\n            ctx.arc(0, 0, this.size, 0, Math.PI * 2);\n            ctx.fill();\n            break;\n        }\n        ctx.restore();\n      }\n    }\n\n    // Initialize particles and shapes\n    for (let i = 0; i < maxParticles; i++) {\n      particles.push(new Particle());\n    }\n\n    for (let i = 0; i < maxShapes; i++) {\n      shapes.push(new Shape());\n    }\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw gradient background\n      const gradient = ctx.createRadialGradient(\n        canvas.width / 2, canvas.height / 2, 0,\n        canvas.width / 2, canvas.height / 2, canvas.width / 2\n      );\n      gradient.addColorStop(0, 'rgba(0, 0, 0, 0.8)');\n      gradient.addColorStop(1, 'rgba(30, 58, 138, 0.3)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Update and draw shapes\n      shapes.forEach(shape => {\n        shape.update();\n        shape.draw();\n      });\n\n      // Update and draw particles\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw();\n      });\n\n      // Draw connecting lines between nearby particles\n      ctx.strokeStyle = 'rgba(65, 105, 225, 0.1)';\n      ctx.lineWidth = 1;\n      \n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          const dx = particles[i].x - particles[j].x;\n          const dy = particles[i].y - particles[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance < 100) {\n            ctx.beginPath();\n            ctx.moveTo(particles[i].x, particles[i].y);\n            ctx.lineTo(particles[j].x, particles[j].y);\n            ctx.stroke();\n          }\n        }\n      }\n\n      // Add subtle pulsing effect\n      const time = Date.now() * 0.001;\n      const pulse = Math.sin(time) * 0.1 + 0.9;\n      ctx.globalAlpha = pulse * 0.3;\n      \n      // Draw some floating text-like elements\n      ctx.fillStyle = 'rgba(255, 215, 0, 0.05)';\n      ctx.font = '12px monospace';\n      ctx.textAlign = 'center';\n      \n      const gameElements = ['🎮', '⚡', '🏆', '💎', '⭐'];\n      gameElements.forEach((element, index) => {\n        const x = (canvas.width / gameElements.length) * index + Math.sin(time + index) * 20;\n        const y = canvas.height * 0.2 + Math.cos(time + index) * 30;\n        ctx.fillText(element, x, y);\n      });\n\n      ctx.globalAlpha = 1;\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -1,\n        pointerEvents: 'none'\n      }}\n    />\n  );\n};\n\nexport default ParticleBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}