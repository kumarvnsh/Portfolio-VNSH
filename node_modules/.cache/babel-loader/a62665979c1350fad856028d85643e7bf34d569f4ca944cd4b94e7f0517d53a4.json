{"ast":null,"code":"var _jsxFileName = \"/Users/vnshkumar/Documents/vnsh-gaming-portfolio/vnsh-gaming-portfolio-react/src/components/ParticleBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n\n    // Set canvas size\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Gaming-themed particles and shapes\n    const particles = [];\n    const shapes = [];\n    const maxParticles = 50;\n    const maxShapes = 15;\n\n    // Particle class\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.vx = (Math.random() - 0.5) * 0.5;\n        this.vy = (Math.random() - 0.5) * 0.5;\n        this.size = Math.random() * 3 + 1;\n        this.opacity = Math.random() * 0.5 + 0.1;\n        this.color = ['rgba(65, 105, 225, 0.3)',\n        // Royal blue\n        'rgba(255, 215, 0, 0.2)',\n        // Gold\n        'rgba(255, 255, 255, 0.1)',\n        // White\n        'rgba(30, 58, 138, 0.2)' // Dark blue\n        ][Math.floor(Math.random() * 4)];\n        this.type = Math.random() > 0.7 ? 'square' : 'circle';\n      }\n      update() {\n        this.x += this.vx;\n        this.y += this.vy;\n\n        // Wrap around edges\n        if (this.x < 0) this.x = canvas.width;\n        if (this.x > canvas.width) this.x = 0;\n        if (this.y < 0) this.y = canvas.height;\n        if (this.y > canvas.height) this.y = 0;\n      }\n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.opacity;\n        ctx.fillStyle = this.color;\n        if (this.type === 'square') {\n          ctx.fillRect(this.x - this.size / 2, this.y - this.size / 2, this.size, this.size);\n        } else {\n          ctx.beginPath();\n          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n    }\n\n    // Geometric shape class\n    class Shape {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 20 + 10;\n        this.rotation = Math.random() * Math.PI * 2;\n        this.rotationSpeed = (Math.random() - 0.5) * 0.02;\n        this.opacity = Math.random() * 0.1 + 0.05;\n        this.color = 'rgba(255, 215, 0, 0.1)';\n        this.type = ['triangle', 'diamond', 'hexagon'][Math.floor(Math.random() * 3)];\n      }\n      update() {\n        this.rotation += this.rotationSpeed;\n      }\n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.opacity;\n        ctx.fillStyle = this.color;\n        ctx.translate(this.x, this.y);\n        ctx.rotate(this.rotation);\n        switch (this.type) {\n          case 'triangle':\n            ctx.beginPath();\n            ctx.moveTo(0, -this.size);\n            ctx.lineTo(-this.size * 0.866, this.size * 0.5);\n            ctx.lineTo(this.size * 0.866, this.size * 0.5);\n            ctx.closePath();\n            ctx.fill();\n            break;\n          case 'diamond':\n            ctx.beginPath();\n            ctx.moveTo(0, -this.size);\n            ctx.lineTo(this.size, 0);\n            ctx.lineTo(0, this.size);\n            ctx.lineTo(-this.size, 0);\n            ctx.closePath();\n            ctx.fill();\n            break;\n          case 'hexagon':\n            ctx.beginPath();\n            for (let i = 0; i < 6; i++) {\n              const angle = i * Math.PI / 3;\n              const x = Math.cos(angle) * this.size;\n              const y = Math.sin(angle) * this.size;\n              if (i === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n            }\n            ctx.closePath();\n            ctx.fill();\n            break;\n          default:\n            // Default case for any other shape types\n            ctx.beginPath();\n            ctx.arc(0, 0, this.size, 0, Math.PI * 2);\n            ctx.fill();\n            break;\n        }\n        ctx.restore();\n      }\n    }\n\n    // Initialize particles and shapes\n    for (let i = 0; i < maxParticles; i++) {\n      particles.push(new Particle());\n    }\n    for (let i = 0; i < maxShapes; i++) {\n      shapes.push(new Shape());\n    }\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw gradient background\n      const gradient = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);\n      gradient.addColorStop(0, 'rgba(0, 0, 0, 0.8)');\n      gradient.addColorStop(1, 'rgba(30, 58, 138, 0.3)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Update and draw shapes\n      shapes.forEach(shape => {\n        shape.update();\n        shape.draw();\n      });\n\n      // Update and draw particles\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw();\n      });\n\n      // Draw connecting lines between nearby particles\n      ctx.strokeStyle = 'rgba(65, 105, 225, 0.1)';\n      ctx.lineWidth = 1;\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          const dx = particles[i].x - particles[j].x;\n          const dy = particles[i].y - particles[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < 100) {\n            ctx.beginPath();\n            ctx.moveTo(particles[i].x, particles[i].y);\n            ctx.lineTo(particles[j].x, particles[j].y);\n            ctx.stroke();\n          }\n        }\n      }\n\n      // Add subtle pulsing effect\n      const time = Date.now() * 0.001;\n      const pulse = Math.sin(time) * 0.1 + 0.9;\n      ctx.globalAlpha = pulse * 0.3;\n\n      // Draw some floating text-like elements\n      ctx.fillStyle = 'rgba(255, 215, 0, 0.05)';\n      ctx.font = '12px monospace';\n      ctx.textAlign = 'center';\n      const gameElements = ['🎮', '⚡', '🏆', '💎', '⭐'];\n      gameElements.forEach((element, index) => {\n        const x = canvas.width / gameElements.length * index + Math.sin(time + index) * 20;\n        const y = canvas.height * 0.2 + Math.cos(time + index) * 30;\n        ctx.fillText(element, x, y);\n      });\n      ctx.globalAlpha = 1;\n      animationFrameId = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      zIndex: -1,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(ParticleBackground, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ParticleBackground;\nexport default ParticleBackground;\nvar _c;\n$RefreshReg$(_c, \"ParticleBackground\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ParticleBackground","_s","canvasRef","canvas","current","ctx","getContext","animationFrameId","resizeCanvas","width","window","innerWidth","height","innerHeight","addEventListener","particles","shapes","maxParticles","maxShapes","Particle","constructor","x","Math","random","y","vx","vy","size","opacity","color","floor","type","update","draw","save","globalAlpha","fillStyle","fillRect","beginPath","arc","PI","fill","restore","Shape","rotation","rotationSpeed","translate","rotate","moveTo","lineTo","closePath","i","angle","cos","sin","push","animate","clearRect","gradient","createRadialGradient","addColorStop","forEach","shape","particle","strokeStyle","lineWidth","length","j","dx","dy","distance","sqrt","stroke","time","Date","now","pulse","font","textAlign","gameElements","element","index","fillText","requestAnimationFrame","removeEventListener","cancelAnimationFrame","ref","style","position","top","left","zIndex","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vnshkumar/Documents/vnsh-gaming-portfolio/vnsh-gaming-portfolio-react/src/components/ParticleBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst ParticleBackground = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n\n    // Set canvas size\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Gaming-themed particles and shapes\n    const particles = [];\n    const shapes = [];\n    const maxParticles = 50;\n    const maxShapes = 15;\n\n    // Particle class\n    class Particle {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.vx = (Math.random() - 0.5) * 0.5;\n        this.vy = (Math.random() - 0.5) * 0.5;\n        this.size = Math.random() * 3 + 1;\n        this.opacity = Math.random() * 0.5 + 0.1;\n        this.color = [\n          'rgba(65, 105, 225, 0.3)',   // Royal blue\n          'rgba(255, 215, 0, 0.2)',    // Gold\n          'rgba(255, 255, 255, 0.1)',  // White\n          'rgba(30, 58, 138, 0.2)'     // Dark blue\n        ][Math.floor(Math.random() * 4)];\n        this.type = Math.random() > 0.7 ? 'square' : 'circle';\n      }\n\n      update() {\n        this.x += this.vx;\n        this.y += this.vy;\n\n        // Wrap around edges\n        if (this.x < 0) this.x = canvas.width;\n        if (this.x > canvas.width) this.x = 0;\n        if (this.y < 0) this.y = canvas.height;\n        if (this.y > canvas.height) this.y = 0;\n      }\n\n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.opacity;\n        ctx.fillStyle = this.color;\n\n        if (this.type === 'square') {\n          ctx.fillRect(this.x - this.size/2, this.y - this.size/2, this.size, this.size);\n        } else {\n          ctx.beginPath();\n          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n    }\n\n    // Geometric shape class\n    class Shape {\n      constructor() {\n        this.x = Math.random() * canvas.width;\n        this.y = Math.random() * canvas.height;\n        this.size = Math.random() * 20 + 10;\n        this.rotation = Math.random() * Math.PI * 2;\n        this.rotationSpeed = (Math.random() - 0.5) * 0.02;\n        this.opacity = Math.random() * 0.1 + 0.05;\n        this.color = 'rgba(255, 215, 0, 0.1)';\n        this.type = ['triangle', 'diamond', 'hexagon'][Math.floor(Math.random() * 3)];\n      }\n\n      update() {\n        this.rotation += this.rotationSpeed;\n      }\n\n      draw() {\n        ctx.save();\n        ctx.globalAlpha = this.opacity;\n        ctx.fillStyle = this.color;\n        ctx.translate(this.x, this.y);\n        ctx.rotate(this.rotation);\n\n        switch (this.type) {\n          case 'triangle':\n            ctx.beginPath();\n            ctx.moveTo(0, -this.size);\n            ctx.lineTo(-this.size * 0.866, this.size * 0.5);\n            ctx.lineTo(this.size * 0.866, this.size * 0.5);\n            ctx.closePath();\n            ctx.fill();\n            break;\n          case 'diamond':\n            ctx.beginPath();\n            ctx.moveTo(0, -this.size);\n            ctx.lineTo(this.size, 0);\n            ctx.lineTo(0, this.size);\n            ctx.lineTo(-this.size, 0);\n            ctx.closePath();\n            ctx.fill();\n            break;\n          case 'hexagon':\n            ctx.beginPath();\n            for (let i = 0; i < 6; i++) {\n              const angle = (i * Math.PI) / 3;\n              const x = Math.cos(angle) * this.size;\n              const y = Math.sin(angle) * this.size;\n              if (i === 0) ctx.moveTo(x, y);\n              else ctx.lineTo(x, y);\n            }\n            ctx.closePath();\n            ctx.fill();\n            break;\n          default:\n            // Default case for any other shape types\n            ctx.beginPath();\n            ctx.arc(0, 0, this.size, 0, Math.PI * 2);\n            ctx.fill();\n            break;\n        }\n        ctx.restore();\n      }\n    }\n\n    // Initialize particles and shapes\n    for (let i = 0; i < maxParticles; i++) {\n      particles.push(new Particle());\n    }\n\n    for (let i = 0; i < maxShapes; i++) {\n      shapes.push(new Shape());\n    }\n\n    // Animation loop\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw gradient background\n      const gradient = ctx.createRadialGradient(\n        canvas.width / 2, canvas.height / 2, 0,\n        canvas.width / 2, canvas.height / 2, canvas.width / 2\n      );\n      gradient.addColorStop(0, 'rgba(0, 0, 0, 0.8)');\n      gradient.addColorStop(1, 'rgba(30, 58, 138, 0.3)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Update and draw shapes\n      shapes.forEach(shape => {\n        shape.update();\n        shape.draw();\n      });\n\n      // Update and draw particles\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw();\n      });\n\n      // Draw connecting lines between nearby particles\n      ctx.strokeStyle = 'rgba(65, 105, 225, 0.1)';\n      ctx.lineWidth = 1;\n      \n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          const dx = particles[i].x - particles[j].x;\n          const dy = particles[i].y - particles[j].y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance < 100) {\n            ctx.beginPath();\n            ctx.moveTo(particles[i].x, particles[i].y);\n            ctx.lineTo(particles[j].x, particles[j].y);\n            ctx.stroke();\n          }\n        }\n      }\n\n      // Add subtle pulsing effect\n      const time = Date.now() * 0.001;\n      const pulse = Math.sin(time) * 0.1 + 0.9;\n      ctx.globalAlpha = pulse * 0.3;\n      \n      // Draw some floating text-like elements\n      ctx.fillStyle = 'rgba(255, 215, 0, 0.05)';\n      ctx.font = '12px monospace';\n      ctx.textAlign = 'center';\n      \n      const gameElements = ['🎮', '⚡', '🏆', '💎', '⭐'];\n      gameElements.forEach((element, index) => {\n        const x = (canvas.width / gameElements.length) * index + Math.sin(time + index) * 20;\n        const y = canvas.height * 0.2 + Math.cos(time + index) * 30;\n        ctx.fillText(element, x, y);\n      });\n\n      ctx.globalAlpha = 1;\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -1,\n        pointerEvents: 'none'\n      }}\n    />\n  );\n};\n\nexport default ParticleBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}