{"ast":null,"code":"var _jsxFileName = \"/Users/vnshkumar/Documents/vnsh-gaming-portfolio/vnsh-gaming-portfolio-react/src/components/games/MemoryGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryGame = () => {\n  _s();\n  const [level, setLevel] = useState(1);\n  const [gameActive, setGameActive] = useState(false);\n  const [sequence, setSequence] = useState([]);\n  const [playerSequence, setPlayerSequence] = useState([]);\n  const [showingSequence, setShowingSequence] = useState(false);\n  const [status, setStatus] = useState('Click Start Game to begin!');\n  const [score, setScore] = useState(0);\n  const colors = ['#3b82f6', '#fbbf24', '#10b981', '#ef4444'];\n  const buttonsRef = useRef([]);\n  const startGame = () => {\n    setGameActive(true);\n    setLevel(1);\n    setScore(0);\n    setStatus('Game started! Watch the pattern...');\n    nextLevel();\n  };\n  const nextLevel = () => {\n    const newSequence = [...sequence];\n    newSequence.push(Math.floor(Math.random() * 4));\n    setSequence(newSequence);\n    setPlayerSequence([]);\n    setShowingSequence(true);\n    setStatus(`Level ${level} - Watch the pattern...`);\n    setTimeout(() => {\n      showSequence(newSequence);\n    }, 1000);\n  };\n  const showSequence = seq => {\n    let i = 0;\n    const interval = setInterval(() => {\n      if (i < seq.length) {\n        const button = buttonsRef.current[seq[i]];\n        if (button) {\n          button.style.background = colors[seq[i]];\n          setTimeout(() => {\n            button.style.background = 'rgba(255, 255, 255, 0.1)';\n          }, 500);\n        }\n        i++;\n      } else {\n        clearInterval(interval);\n        setShowingSequence(false);\n        setStatus('Now repeat the pattern!');\n      }\n    }, 800);\n  };\n  const handleButtonClick = colorIndex => {\n    if (!gameActive || showingSequence) return;\n    const button = buttonsRef.current[colorIndex];\n    if (button) {\n      button.style.background = colors[colorIndex];\n      setTimeout(() => {\n        button.style.background = 'rgba(255, 255, 255, 0.1)';\n      }, 200);\n    }\n    const newPlayerSequence = [...playerSequence, colorIndex];\n    setPlayerSequence(newPlayerSequence);\n    if (newPlayerSequence[newPlayerSequence.length - 1] !== sequence[newPlayerSequence.length - 1]) {\n      // Game over\n      setGameActive(false);\n      setStatus(`Game Over! You reached level ${level}. Click Start Game to try again!`);\n      setSequence([]);\n      setPlayerSequence([]);\n    } else if (newPlayerSequence.length === sequence.length) {\n      // Level completed\n      setScore(prevScore => prevScore + level * 10);\n      setLevel(prevLevel => prevLevel + 1);\n      setStatus(`Level ${level} completed! Next level starting...`);\n      setTimeout(() => {\n        nextLevel();\n      }, 1500);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"mini-game-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mini-game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mini-game-title\",\n          children: \"Code Pattern Memory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mini-game-desc\",\n          children: \"Remember and repeat the code patterns!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Level: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"score-display\",\n                children: level\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"score-display\",\n                children: score\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-game\",\n              onClick: startGame,\n              disabled: gameActive,\n              children: gameActive ? 'Playing...' : 'Start Game'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"memory-field\",\n            children: colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"memory-button\",\n              \"data-color\": index,\n              ref: el => buttonsRef.current[index] = el,\n              onClick: () => handleButtonClick(index),\n              style: {\n                cursor: gameActive && !showingSequence ? 'pointer' : 'default'\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"f/zjnjqphfP3k+dhMH0f284Hij0=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MemoryGame","_s","level","setLevel","gameActive","setGameActive","sequence","setSequence","playerSequence","setPlayerSequence","showingSequence","setShowingSequence","status","setStatus","score","setScore","colors","buttonsRef","startGame","nextLevel","newSequence","push","Math","floor","random","setTimeout","showSequence","seq","i","interval","setInterval","length","button","current","style","background","clearInterval","handleButtonClick","colorIndex","newPlayerSequence","prevScore","prevLevel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","color","index","ref","el","cursor","_c","$RefreshReg$"],"sources":["/Users/vnshkumar/Documents/vnsh-gaming-portfolio/vnsh-gaming-portfolio-react/src/components/games/MemoryGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst MemoryGame = () => {\n  const [level, setLevel] = useState(1);\n  const [gameActive, setGameActive] = useState(false);\n  const [sequence, setSequence] = useState([]);\n  const [playerSequence, setPlayerSequence] = useState([]);\n  const [showingSequence, setShowingSequence] = useState(false);\n  const [status, setStatus] = useState('Click Start Game to begin!');\n  const [score, setScore] = useState(0);\n  \n  const colors = ['#3b82f6', '#fbbf24', '#10b981', '#ef4444'];\n  const buttonsRef = useRef([]);\n\n  const startGame = () => {\n    setGameActive(true);\n    setLevel(1);\n    setScore(0);\n    setStatus('Game started! Watch the pattern...');\n    nextLevel();\n  };\n\n  const nextLevel = () => {\n    const newSequence = [...sequence];\n    newSequence.push(Math.floor(Math.random() * 4));\n    setSequence(newSequence);\n    setPlayerSequence([]);\n    setShowingSequence(true);\n    setStatus(`Level ${level} - Watch the pattern...`);\n    \n    setTimeout(() => {\n      showSequence(newSequence);\n    }, 1000);\n  };\n\n  const showSequence = (seq) => {\n    let i = 0;\n    const interval = setInterval(() => {\n      if (i < seq.length) {\n        const button = buttonsRef.current[seq[i]];\n        if (button) {\n          button.style.background = colors[seq[i]];\n          setTimeout(() => {\n            button.style.background = 'rgba(255, 255, 255, 0.1)';\n          }, 500);\n        }\n        i++;\n      } else {\n        clearInterval(interval);\n        setShowingSequence(false);\n        setStatus('Now repeat the pattern!');\n      }\n    }, 800);\n  };\n\n  const handleButtonClick = (colorIndex) => {\n    if (!gameActive || showingSequence) return;\n\n    const button = buttonsRef.current[colorIndex];\n    if (button) {\n      button.style.background = colors[colorIndex];\n      setTimeout(() => {\n        button.style.background = 'rgba(255, 255, 255, 0.1)';\n      }, 200);\n    }\n\n    const newPlayerSequence = [...playerSequence, colorIndex];\n    setPlayerSequence(newPlayerSequence);\n\n    if (newPlayerSequence[newPlayerSequence.length - 1] !== sequence[newPlayerSequence.length - 1]) {\n      // Game over\n      setGameActive(false);\n      setStatus(`Game Over! You reached level ${level}. Click Start Game to try again!`);\n      setSequence([]);\n      setPlayerSequence([]);\n    } else if (newPlayerSequence.length === sequence.length) {\n      // Level completed\n      setScore(prevScore => prevScore + level * 10);\n      setLevel(prevLevel => prevLevel + 1);\n      setStatus(`Level ${level} completed! Next level starting...`);\n      setTimeout(() => {\n        nextLevel();\n      }, 1500);\n    }\n  };\n\n  return (\n    <section className=\"mini-game-section\">\n      <div className=\"container\">\n        <div className=\"mini-game-container\">\n          <h3 className=\"mini-game-title\">Code Pattern Memory</h3>\n          <p className=\"mini-game-desc\">Remember and repeat the code patterns!</p>\n          <div className=\"memory-game\">\n            <div className=\"game-stats\">\n              <span>Level: <span className=\"score-display\">{level}</span></span>\n              <span>Score: <span className=\"score-display\">{score}</span></span>\n              <button \n                className=\"btn-game\" \n                onClick={startGame}\n                disabled={gameActive}\n              >\n                {gameActive ? 'Playing...' : 'Start Game'}\n              </button>\n            </div>\n            <div className=\"memory-field\">\n              {colors.map((color, index) => (\n                <div\n                  key={index}\n                  className=\"memory-button\"\n                  data-color={index}\n                  ref={el => buttonsRef.current[index] = el}\n                  onClick={() => handleButtonClick(index)}\n                  style={{ cursor: gameActive && !showingSequence ? 'pointer' : 'default' }}\n                ></div>\n              ))}\n            </div>\n            <div className=\"game-status\">{status}</div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default MemoryGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}